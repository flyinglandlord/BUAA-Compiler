GLOBAL_VAR_DECL:
DECLARE_VAR interesting@<0,0> = 1
CONST DECLARE_VAR MOD@<0,0> = 100005
CONST DECLARE_VAR SUM@<0,0> = 777777

FUNCTIONS:
one
LABEL one:
RETURN 1

one2
LABEL one2:
DEF PARAM i@<1,2>
#T0 = 2 MUL i@<1,2>
#T1 = #T0 ADD 1
#T2 = i@<1,2> GT #T1
BRANCH EQ END_IF_0 #T2
LABEL IF_THEN_1:
RETURN i@<1,2>
JUMP END_IF_0
LABEL END_IF_0:
BEGIN CALL one
CALL one RET #T3
END CALL one
BEGIN CALL one
CALL one RET #T4
END CALL one
BEGIN CALL one
CALL one RET #T5
END CALL one
#T6 = #T4 DIV #T5
#T7 = #T3 ADD #T6
BEGIN CALL one
CALL one RET #T8
END CALL one
#T9 = #T7 SUB #T8
RETURN #T9

main
LABEL main:
DECLARE_VAR x@<1,5>
x@<1,5> = GETINT
JUMP COND_33
LABEL COND_33:
#T33 = x@<1,5> MOD 100005
BEGIN CALL tRue
CALL tRue RET #T34
END CALL tRue
BEGIN CALL fAlse
CALL fAlse RET #T35
END CALL fAlse
#T36 = #T34 ADD #T35
#T37 = #T33 LT #T36
BRANCH EQ END_WHILE_37 #T37
LABEL END_COND_34:
JUMP LOOP_BODY_35
LABEL LOOP_BODY_35:
BEGIN CALL tRue
CALL tRue RET #T38
END CALL tRue
PRINT #T38
PRINT _STR1
#T39 = x@<1,5> ADD 100
x@<1,5> = #T39
JUMP COND_38
LABEL COND_38:
#T40 = x@<1,5> DIV 100005
#T41 = #T40 ADD 100005
BEGIN CALL tRue
CALL tRue RET #T42
END CALL tRue
BEGIN CALL fAlse
CALL fAlse RET #T43
END CALL fAlse
#T44 = #T42 ADD #T43
#T45 = #T41 LT #T44
BRANCH EQ END_WHILE_42 #T45
LABEL END_COND_39:
JUMP LOOP_BODY_40
LABEL LOOP_BODY_40:
#T46 = x@<1,5> SUB 1
x@<1,5> = #T46
BEGIN CALL tRue
CALL tRue RET #T47
END CALL tRue
#T48 = #T47 ADD x@<1,5>
PRINT #T48
PRINT _STR2
JUMP COND_43
LABEL COND_43:
#T49 = x@<1,5> DIV 100005
BEGIN CALL tRue
CALL tRue RET #T50
END CALL tRue
BEGIN CALL fAlse
CALL fAlse RET #T51
END CALL fAlse
#T52 = #T50 ADD #T51
#T53 = #T49 LT #T52
BRANCH EQ END_WHILE_47 #T53
LABEL END_COND_44:
JUMP LOOP_BODY_45
LABEL LOOP_BODY_45:
#T54 = x@<1,5> SUB 1
x@<1,5> = #T54
BEGIN CALL tRue
CALL tRue RET #T55
END CALL tRue
#T56 = #T55 ADD x@<1,5>
PRINT #T56
PRINT _STR3
JUMP WHILE_46
LABEL WHILE_46:
#T57 = x@<1,5> DIV 100005
BEGIN CALL tRue
CALL tRue RET #T58
END CALL tRue
BEGIN CALL fAlse
CALL fAlse RET #T59
END CALL fAlse
#T60 = #T58 ADD #T59
#T61 = #T57 LT #T60
BRANCH NE LOOP_BODY_45 #T61
LABEL END_WHILE_47:
JUMP WHILE_41
LABEL WHILE_41:
#T62 = x@<1,5> DIV 100005
#T63 = #T62 ADD 100005
BEGIN CALL tRue
CALL tRue RET #T64
END CALL tRue
BEGIN CALL fAlse
CALL fAlse RET #T65
END CALL fAlse
#T66 = #T64 ADD #T65
#T67 = #T63 LT #T66
BRANCH NE LOOP_BODY_40 #T67
LABEL END_WHILE_42:
JUMP WHILE_36
LABEL WHILE_36:
#T68 = x@<1,5> MOD 100005
BEGIN CALL tRue
CALL tRue RET #T69
END CALL tRue
BEGIN CALL fAlse
CALL fAlse RET #T70
END CALL fAlse
#T71 = #T69 ADD #T70
#T72 = #T68 LT #T71
BRANCH NE LOOP_BODY_35 #T72
LABEL END_WHILE_37:
PRINT x@<1,5>
PRINT _STR4
RETURN 0

tRue
LABEL tRue:
DECLARE_VAR n@<1,3>
n@<1,3> = -99
JUMP COND_2
LABEL COND_2:
BRANCH EQ END_WHILE_6 1
LABEL END_COND_3:
JUMP LOOP_BODY_4
LABEL LOOP_BODY_4:
BEGIN CALL one
CALL one RET #T10
END CALL one
#T11 = n@<1,3> LT #T10
BRANCH EQ IF_ELSE_9 #T11
LABEL IF_THEN_8:
#T12 = n@<1,3> ADD 1
n@<1,3> = #T12
JUMP END_IF_7
LABEL IF_ELSE_9:
RETURN n@<1,3>
JUMP END_IF_7
LABEL END_IF_7:
JUMP WHILE_5
LABEL WHILE_5:
BRANCH NE LOOP_BODY_4 1
LABEL END_WHILE_6:
JUMP COND_10
LABEL COND_10:
BRANCH EQ END_WHILE_14 1
LABEL END_COND_11:
JUMP LOOP_BODY_12
LABEL LOOP_BODY_12:
BEGIN CALL one
CALL one RET #T13
END CALL one
BEGIN CALL one2
PUSH #T13
CALL one2 RET #T14
END CALL one2
#T15 = n@<1,3> LT #T14
BRANCH EQ IF_ELSE_17 #T15
LABEL IF_THEN_16:
#T16 = n@<1,3> ADD 1
n@<1,3> = #T16
JUMP END_IF_15
LABEL IF_ELSE_17:
JUMP END_WHILE_14
JUMP END_IF_15
LABEL END_IF_15:
JUMP WHILE_13
LABEL WHILE_13:
BRANCH NE LOOP_BODY_12 1
LABEL END_WHILE_14:
JUMP COND_18
LABEL COND_18:
BRANCH EQ END_WHILE_22 1
LABEL END_COND_19:
JUMP LOOP_BODY_20
LABEL LOOP_BODY_20:
BEGIN CALL one2
PUSH n@<1,3>
CALL one2 RET #T17
END CALL one2
#T18 = n@<1,3> ADD #T17
BEGIN CALL one
CALL one RET #T19
END CALL one
#T20 = #T19 ADD 1
BEGIN CALL one2
PUSH #T20
CALL one2 RET #T21
END CALL one2
BEGIN CALL one2
PUSH #T21
CALL one2 RET #T22
END CALL one2
#T23 = #T18 LT #T22
BRANCH EQ IF_ELSE_25 #T23
LABEL IF_THEN_24:
#T24 = n@<1,3> ADD 1
n@<1,3> = #T24
JUMP END_IF_23
LABEL IF_ELSE_25:
RETURN n@<1,3>
JUMP END_IF_23
LABEL END_IF_23:
JUMP WHILE_21
LABEL WHILE_21:
BRANCH NE LOOP_BODY_20 1
LABEL END_WHILE_22:
RETURN n@<1,3>

fAlse
LABEL fAlse:
DECLARE_VAR x@<1,4>
BEGIN CALL tRue
CALL tRue RET #T25
END CALL tRue
x@<1,4> = #T25
JUMP COND_26
LABEL COND_26:
BRANCH EQ END_WHILE_30 1
LABEL END_COND_27:
JUMP LOOP_BODY_28
LABEL LOOP_BODY_28:
BEGIN CALL tRue
CALL tRue RET #T26
END CALL tRue
BEGIN CALL tRue
CALL tRue RET #T27
END CALL tRue
#T28 = #T26 MUL #T27
#T29 = x@<1,4> ADD #T28
x@<1,4> = #T29
PRINT x@<1,4>
PRINT _STR0
#T30 = x@<1,4> GT 48
BRANCH EQ END_IF_31 #T30
LABEL IF_THEN_32:
JUMP END_WHILE_30
JUMP END_IF_31
LABEL END_IF_31:
JUMP WHILE_29
LABEL WHILE_29:
BRANCH NE LOOP_BODY_28 1
LABEL END_WHILE_30:
BEGIN CALL tRue
CALL tRue RET #T31
END CALL tRue
#T32 = x@<1,4> MOD #T31
RETURN #T32


GLOBAL_STRINGS:
_STR0 = \n
_STR1 = \n
_STR2 = \n
_STR4 = \n
_STR3 = \n

